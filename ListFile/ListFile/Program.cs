using Microsoft.Win32;
using Microsoft.Win32.SafeHandles;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
//using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
//using System.Threading.Tasks;

namespace ListFile
{
    class Program
    {

        static void Main(string[] args)
        {

            DoubleLinkedList tmplist = new DoubleLinkedList();

            tmplist.DoubleLinkedlist();

        }

        public class DoubleLinkedList {          
            public void DoubleLinkedlist()
            {
                fsf.WriteLine( "<script type=\"text/javascript\"> function myfun(y) { var x = document.getElementById(y); if(x.style.display!==\"none\"){ x.style.display= \"none\";} else{ x.style.display= \"block\"; }}</script>\n");
                fsf.WriteLine("<style type=\"text/css\">\nbody{\ncolor: yellow;\nbackground-color:blue;font-weight: bold;font-size: 20px;}\n.hl{ background-color: yellow;color: blue;font-weight: bolder;}\n.fh{\ncolor: white;}	</style>");
                DriveInfo[] colDrives = DriveInfo.GetDrives();


                foreach (DriveInfo di in colDrives)
                {
                    if (di.IsReady && di.Name == Path.GetPathRoot( Environment.SystemDirectory))
                    {
                        fsf.WriteLine("<br>  <ol >");
                        Console.WriteLine("Drive Letter: " + di.Name);

                        fsf.WriteLine("<br> <li class=\"hl\">   Drive Letter: " + di.Name +
                           "<br> Volume Label: " + di.VolumeLabel +
                           "<br> Total Size: " + BytestoGB(di.TotalSize) +
                           "<br> Total Used Space: " + BytestoGB(di.TotalSize - di.AvailableFreeSpace ) +
                           "<br> Available Free Space: " + BytestoGB(di.AvailableFreeSpace) +
                           "<br> Drive Type: " + di.DriveType +
                           "<br> Drive Format: " + di.DriveFormat + " </li>");
                        
                        ProgramsSearch(Path.GetPathRoot(Environment.SystemDirectory) + "Program Files\\");
                        ProgramsSearch(Path.GetPathRoot(Environment.SystemDirectory) + "Program Files (x86)\\");

                        fsf.WriteLine("<div class=\"hl\"><br> "+Path.GetPathRoot( Environment.SystemDirectory)+"Users</div>");
                        fsf.WriteLine("<br>  <ol >");
                        DirectorySearchwtr(Path.GetPathRoot( Environment.SystemDirectory)+ "Users\\");
                        mhsc();
                    }
                    else if (di.IsReady)
                    {
                        fsf.WriteLine("<br>  <ol >");
                        fsf.WriteLine("<br> <li class=\"hl\">   Drive Letter: " + di.Name +
                          "<br> Volume Label: " + di.VolumeLabel +
                          "<br> Total Size: " + BytestoGB(di.TotalSize) +
                          "<br> Total Used Space: " + BytestoGB(di.TotalSize - di.AvailableFreeSpace) +
                          "<br> Available Free Space: " + BytestoGB(di.AvailableFreeSpace) +
                          "<br> Drive Type: " + di.DriveType +
                          "<br> Drive Format: " + di.DriveFormat + " </li>");

                        DirectorySearchwtr(di.Name);
                        mhsc();
                    }
                 
                }
                Console.WriteLine("finished writing ");
                

            }

            string[] programingext = new string[25] { "sln", "bat", "php", "c", "cpp", "java", "asm", "cs", "sln", "vbs", "gradle", "py", "htm", "aspx", "asp", "ajax", "json", "vbp", "frm", "html", "js", "css", "h", "sql", "db" };
            
            Int64 idc=0;
            StreamWriter fsf = new StreamWriter(Path.GetPathRoot( Environment.SystemDirectory)+"Users\\Public\\Documents\\fsf.htm");
            public string BytestoGB(Int64 b)
            {
                try
                {
                    Int64 kb = b / 1024;
                    Int64 mb = kb / 1024;
                    Int64 gb = mb / 1024;
                    return gb+"GB";
                }
                catch
                {
                    return 0 + "GB";
                }
            }

            public void DirectorySearchwtr(string dir)
            {
                try
                {
                    dir = dir.ToLower();
                   // Console.WriteLine((dir.IndexOf("_files") != -1 || Path.GetFullPath(dir).IndexOf("appdata") != -1 || dir.IndexOf(@":\users\all users") != -1)+ dir +"\tfp "+ Path.GetFullPath(dir));
                    if (dir.IndexOf("_files") != -1 || dir.IndexOf("appdata") != -1 || dir.IndexOf(@":\$recycle.bin") != -1 || dir.IndexOf(@":\users\all users") != -1)
                    {
                        return;
                    }
                    else
                    {
                        string prevtitl2 = "";
                        //Console.WriteLine("exist " + Directory.Exists(dir));
                        foreach (string f in Directory.GetFiles(dir))
                        {
                            string d = dir;
                            if (prevtitl2 != f)
                                foreach (string pf in programingext)
                                    if (prevtitl2 != f)
                                    {
                                        if ( (Path.GetExtension(f).Length > 0 && Path.GetExtension(f).Substring(1).ToLower() == pf) || sihl(d))
                                        {
                                            fsf.WriteLine("<br><li class=\"hl\">file= " + f + "</li>");
                                            prevtitl2 = f;
                                        }
                                        else
                                        {
                                            fsf.WriteLine("<br><li class=\"fh\">file= " + f + "</li>");
                                            prevtitl2 = f;
                                        }
                                    }
                        }

                        foreach (string e in Directory.GetDirectories(dir))
                        {
                            idc++; string d = e.ToLower();
                            fsf.WriteLine("<br> <li id=\"" + dir.Replace("\\", "") + "\"   onclick=\"myfun('" + e.Replace("\\", "") + "')\" >folder: " +
                                Path.GetFullPath(d) + " </li>");

                            fsf.WriteLine("<br>  <ol id=\"" + e.Replace("\\", "") + "\">");
                            DirectorySearchwtr(d);
                            mhsc();
                        }
                    }
                }

                catch (Exception ex)
                {
                    //Console.WriteLine("newException Unable to access file. ");
                    //Console.WriteLine("\n= " + ex.Message + "\nmsg= " + ex.Source+"\ndata= "+ ex.Data);
                }
                //   Console.WriteLine("DirectorySearch competed for "+ dir);
            }
          
            public void mhsc()
            {
                fsf.WriteLine(" </ol>");
                fsf.Flush();
            }

            public bool sihl(string d)
            {
               string dd = d.ToLower();
                if (
                   /*    dd.IndexOf("work") != -1 
                    || dd.IndexOf("android") != -1 
                    || dd.IndexOf("web") != -1 
                    || dd.IndexOf("place") != -1 
                    || dd.IndexOf("profil") != -1
                    || dd.IndexOf("profes") != -1
                    || dd.IndexOf("programming") != -1
                    || dd.IndexOf("programing") != -1
                    || dd.IndexOf("ing") != -1
                    || dd.IndexOf("sql") != -1
                    || dd.IndexOf("c++") != -1 
                    || dd.IndexOf("c#") != -1 
                    || dd.IndexOf("php") != -1 
                    || dd.IndexOf(".NET") != -1 
                    || dd.IndexOf("source") != -1 
                    || dd.IndexOf("visual") != -1 
                    || dd.IndexOf("cod") != -1 
                    || dd.IndexOf("htdocs") != -1 
                    || (dd.IndexOf("htm") != -1 && dd.IndexOf("_files") == -1)
                    || dd.IndexOf("my") != -1
                    || dd.IndexOf("personal") != -1
                    || dd.IndexOf("secret") != -1
                    || dd.IndexOf("hidden") != -1
                    || dd.IndexOf("virus") != -1
                    ||*/ dd.IndexOf("sex") != -1
                    || dd.IndexOf("porn") != -1
                    || dd.IndexOf("masterbation") != -1
                    || dd.IndexOf("xxx") != -1
                    || dd.IndexOf("girlfriend") != -1
                    || dd.IndexOf("fuck") != -1
                    )
                    return true;
                else
                    return false;


            }

            public void ProgramsSearch (string dir)
            {
                try
                {
                    dir = dir.ToLower();
                    foreach (string e in Directory.GetDirectories(dir))
                        {
                            string d = e.ToLower();
                            fsf.WriteLine("<br> <li class=\"fh\" id=\"" + dir.Replace("\\", "") + "\"   onclick=\"myfun('" + e.Replace("\\", "") + "')\" >folder: " + Path.GetFullPath(d) + " </li>");
                            

                        if (Directory.GetDirectories(d).Length < 4 && Directory.GetDirectories(d).Length >0)
                        {
                            fsf.WriteLine("<br>  <ol id=\"" + e.Replace("\\", "") + "\">");
                            foreach (string f in Directory.GetDirectories(d))
                                fsf.WriteLine("<br> <li id=\"" + d.Replace("\\", "") + "\")\" >folder: " + Path.GetFullPath(f) + " </li>");
                            mhsc();
                        }

                        }
                }

                catch (Exception ex)
                {
                    //Console.WriteLine("newException Unable to access file. ");
                    //Console.WriteLine("\n= " + ex.Message + "\nmsg= " + ex.Source+"\ndata= "+ ex.Data);
                }
                //   Console.WriteLine("DirectorySearch competed for "+ dir);
            }

        }


    }
}

